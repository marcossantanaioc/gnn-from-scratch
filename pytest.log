============================= test session starts ==============================
platform linux -- Python 3.10.16, pytest-7.3.1, pluggy-1.5.0 -- /home/marcossantana/anaconda3/envs/cheminformatics-env/bin/python3.10
cachedir: .pytest_cache
rootdir: /home/marcossantana/github/gnn-from-scratch
plugins: typeguard-2.13.3, anyio-4.8.0, jaxtyping-0.3.2
collecting ... collected 2 items

tests/test_data_utils.py::TestMPNNBatching::test_create_batch_edge_index FAILED [ 50%]
tests/test_data_utils.py::TestMPNNBatching::test_mpnn_collate_diag FAILED [100%]

=================================== FAILURES ===================================
________________ TestMPNNBatching.test_create_batch_edge_index _________________

param_signature = <Signature (edge_indices: collections.abc.Sequence[jaxtyping.Int[Tensor, '2 edges']]) -> Any>
args = ([tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  0,  ..., 26, 26,... 8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...],)
kwargs = {}
arguments = {'edge_indices': [tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  ...  8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...]}
module = 'graphmodels.data_utils'
typechecker = <function typechecked at 0x7fc60606f5b0>

    def _get_problem_arg(
        param_signature: inspect.Signature, args, kwargs, arguments, module, typechecker
    ) -> NoReturn:
        """Determines which argument was likely to be the problematic one responsible for
        raising a type-check error.
    
        It returns the result by raising an Exception: you should grab this and extract the
        string out of it. We do this, rather than just returning the value, to aid debugging
        by making it possible to walk down the stack to the issue.
        """
        # No performance concerns, as this is only used when we're about to raise an error
        # anyway.
        for keep_name in param_signature.parameters.keys():
            new_parameters = []
            keep_annotation = sentinel = object()
            for p_name, p in param_signature.parameters.items():
                if p_name == keep_name:
                    new_parameters.append(
                        inspect.Parameter(
                            p.name, p.kind, default=p.default, annotation=p.annotation
                        )
                    )
                    assert keep_annotation is sentinel
                    keep_annotation = _remove_typing(p.annotation)
                else:
                    new_parameters.append(
                        inspect.Parameter(p.name, p.kind, default=p.default)
                    )
            assert keep_annotation is not sentinel
            new_signature = inspect.Signature(new_parameters)
            fn = _make_fn_with_signature(
                "check_single_arg", "check_single_arg", module, new_signature, output=False
            )
            fn = _apply_typechecker(
                typechecker, fn
            )  # but no `jaxtyped`; keep the same environment.
            try:
>               fn(*args, **kwargs)

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = ([tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  0,  ..., 26, 26,... 8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...],)
kwargs = {}, memo = <typeguard._CallMemo object at 0x7fc5f13beec0>

    def wrapper(*args, **kwargs):
        memo = _CallMemo(python_func, _localns, args=args, kwargs=kwargs)
>       check_argument_types(memo)

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/typeguard/__init__.py:1032: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

memo = <typeguard._CallMemo object at 0x7fc5f13beec0>

    def check_argument_types(memo: Optional[_CallMemo] = None) -> bool:
        """
        Check that the argument values match the annotated types.
    
        Unless both ``args`` and ``kwargs`` are provided, the information will be retrieved from
        the previous stack frame (ie. from the function that called this).
    
        :return: ``True``
        :raises TypeError: if there is an argument type mismatch
    
        """
        if memo is None:
            # faster than inspect.currentframe(), but not officially
            # supported in all python implementations
            frame = sys._getframe(1)
    
            try:
                func = find_function(frame)
            except LookupError:
                return True  # This can happen with the Pydev/PyCharm debugger extension installed
    
            memo = _CallMemo(func, frame.f_locals)
    
        for argname, expected_type in memo.type_hints.items():
            if argname != 'return' and argname in memo.arguments:
                value = memo.arguments[argname]
                description = 'argument "{}"'.format(argname)
                try:
                    check_type(description, value, expected_type, memo)
                except TypeError as exc:  # suppress unnecessarily long tracebacks
>                   raise TypeError(*exc.args) from None
E                   TypeError: type of argument "edge_indices"[1] must be jaxtyping.Int[Tensor, '2 edges']; got torch.Tensor instead

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/typeguard/__init__.py:875: TypeError

The above exception was the direct cause of the following exception:

args = ([tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  0,  ..., 26, 26,... 8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...],)
kwargs = {}
bound = <BoundArguments (edge_indices=[tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tenso... 8, 0, 1, 2,
         3, 4, 5, 7, 8, 9, 0, 1, 2, 4, 5, 6, 8, 9, 0, 1, 2, 3, 5, 6, 7, 9, 0, 1,
         2, 6, 7, 8]])])>
memos = ({'edges': 702}, {}, {}, {'edge_indices': [tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, ... 8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...]})

    def wrapped_fn_impl(args, kwargs, bound, memos):
        __tracebackhide__ = True
        # First type-check just the parameters before the function is
        # called.
        try:
            param_fn(*args, **kwargs)
        except AnnotationError:
            raise
        except Exception:
            try:
>               argmsg = _get_problem_arg(
                    param_signature,
                    args,
                    kwargs,
                    bound.arguments,
                    module,
                    typechecker,
                )

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

param_signature = <Signature (edge_indices: collections.abc.Sequence[jaxtyping.Int[Tensor, '2 edges']]) -> Any>
args = ([tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  0,  ..., 26, 26,... 8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...],)
kwargs = {}
arguments = {'edge_indices': [tensor([[ 0,  0,  0,  ..., 30, 30, 30],
        [ 1,  2,  3,  ..., 27, 28, 29]]), tensor([[ 0,  0,  ...  8,
          9, 10,  0,  1,  4,  7,  9, 10,  0,  1,  2,  6,  7,  8, 10,  1,  3,  4,
          6,  7,  8,  9]]), ...]}
module = 'graphmodels.data_utils'
typechecker = <function typechecked at 0x7fc60606f5b0>

    def _get_problem_arg(
        param_signature: inspect.Signature, args, kwargs, arguments, module, typechecker
    ) -> NoReturn:
        """Determines which argument was likely to be the problematic one responsible for
        raising a type-check error.
    
        It returns the result by raising an Exception: you should grab this and extract the
        string out of it. We do this, rather than just returning the value, to aid debugging
        by making it possible to walk down the stack to the issue.
        """
        # No performance concerns, as this is only used when we're about to raise an error
        # anyway.
        for keep_name in param_signature.parameters.keys():
            new_parameters = []
            keep_annotation = sentinel = object()
            for p_name, p in param_signature.parameters.items():
                if p_name == keep_name:
                    new_parameters.append(
                        inspect.Parameter(
                            p.name, p.kind, default=p.default, annotation=p.annotation
                        )
                    )
                    assert keep_annotation is sentinel
                    keep_annotation = _remove_typing(p.annotation)
                else:
                    new_parameters.append(
                        inspect.Parameter(p.name, p.kind, default=p.default)
                    )
            assert keep_annotation is not sentinel
            new_signature = inspect.Signature(new_parameters)
            fn = _make_fn_with_signature(
                "check_single_arg", "check_single_arg", module, new_signature, output=False
            )
            fn = _apply_typechecker(
                typechecker, fn
            )  # but no `jaxtyped`; keep the same environment.
            try:
                fn(*args, **kwargs)
            except Exception as e:
                keep_value = _pformat(arguments[keep_name], short_self=False)
>               raise TypeCheckError(
                    f"\nThe problem arose whilst typechecking parameter '{keep_name}'.\n"
                    f"Actual value: {keep_value}\n"
                    f"Expected type: {keep_annotation}."
                ) from e
E               jaxtyping.TypeCheckError: 
E               The problem arose whilst typechecking parameter 'edge_indices'.
E               Actual value: [
E                 i64[2,702](torch),
E                 i64[2,508](torch),
E                 i64[2,4](torch),
E                 i64[2,12](torch),
E                 i64[2,1688](torch),
E                 i64[2,76](torch),
E                 i64[2,1144](torch),
E                 i64[2,136](torch),
E                 i64[2,1794](torch),
E                 i64[2,1706](torch),
E                 i64[2,368](torch),
E                 i64[2,320](torch),
E                 i64[2,1136](torch),
E                 i64[2,434](torch),
E                 i64[2,1192](torch),
E                 i64[2,1300](torch),
E                 i64[2,166](torch),
E                 i64[2,1596](torch),
E                 i64[2,328](torch),
E                 i64[2,1474](torch),
E                 i64[2,576](torch),
E                 i64[2,66](torch),
E                 i64[2,1878](torch),
E                 i64[2,22](torch),
E                 i64[2,1176](torch),
E                 i64[2,1846](torch),
E                 i64[2,66](torch),
E                 i64[2,92](torch),
E                 i64[2,1130](torch),
E                 i64[2,1496](torch),
E                 i64[2,14](torch),
E                 i64[2,1532](torch),
E                 i64[2,38](torch),
E                 i64[2,50](torch),
E                 i64[2,670](torch),
E                 i64[2,466](torch),
E                 i64[2,152](torch),
E                 i64[2,1512](torch),
E                 i64[2,48](torch),
E                 i64[2,248](torch),
E                 i64[2,194](torch),
E                 i64[2,488](torch),
E                 i64[2,570](torch),
E                 i64[2,1670](torch),
E                 i64[2,1008](torch),
E                 i64[2,414](torch),
E                 i64[2,1576](torch),
E                 i64[2,184](torch),
E                 i64[2,1132](torch),
E                 i64[2,140](torch),
E                 i64[2,1414](torch),
E                 i64[2,854](torch),
E                 i64[2,608](torch),
E                 i64[2,520](torch),
E                 i64[2,186](torch),
E                 i64[2,896](torch),
E                 i64[2,366](torch),
E                 i64[2,296](torch),
E                 i64[2,764](torch),
E                 i64[2,42](torch),
E                 i64[2,1098](torch),
E                 i64[2,1066](torch),
E                 i64[2,1864](torch),
E                 i64[2,76](torch)
E               ]
E               Expected type: collections.abc.Sequence[Int[Tensor, '2 edges']].

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:756: TypeCheckError

The above exception was the direct cause of the following exception:

self = <test_data_utils.TestMPNNBatching object at 0x7fc520425ae0>
batch = SampleBatch(dsets=[SampleEntry(adj_matrix=tensor([[0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1...         2, 6, 7, 8]]), target=tensor([0.8033]), total_nodes=10, total_edges=76)], total_nodes=1795, total_edges=46588)

    def test_create_batch_edge_index(self, batch):
        """Test batch edge indices."""
>       collated_edge_indices = data_utils.create_batch_edge_index(
            [dset.edge_indices for dset in batch.dsets],
        )
E       jaxtyping.TypeCheckError: Type-check error whilst checking the parameters of graphmodels.data_utils.create_batch_edge_index.
E       The problem arose whilst typechecking parameter 'edge_indices'.
E       Actual value: [
E         i64[2,702](torch),
E         i64[2,508](torch),
E         i64[2,4](torch),
E         i64[2,12](torch),
E         i64[2,1688](torch),
E         i64[2,76](torch),
E         i64[2,1144](torch),
E         i64[2,136](torch),
E         i64[2,1794](torch),
E         i64[2,1706](torch),
E         i64[2,368](torch),
E         i64[2,320](torch),
E         i64[2,1136](torch),
E         i64[2,434](torch),
E         i64[2,1192](torch),
E         i64[2,1300](torch),
E         i64[2,166](torch),
E         i64[2,1596](torch),
E         i64[2,328](torch),
E         i64[2,1474](torch),
E         i64[2,576](torch),
E         i64[2,66](torch),
E         i64[2,1878](torch),
E         i64[2,22](torch),
E         i64[2,1176](torch),
E         i64[2,1846](torch),
E         i64[2,66](torch),
E         i64[2,92](torch),
E         i64[2,1130](torch),
E         i64[2,1496](torch),
E         i64[2,14](torch),
E         i64[2,1532](torch),
E         i64[2,38](torch),
E         i64[2,50](torch),
E         i64[2,670](torch),
E         i64[2,466](torch),
E         i64[2,152](torch),
E         i64[2,1512](torch),
E         i64[2,48](torch),
E         i64[2,248](torch),
E         i64[2,194](torch),
E         i64[2,488](torch),
E         i64[2,570](torch),
E         i64[2,1670](torch),
E         i64[2,1008](torch),
E         i64[2,414](torch),
E         i64[2,1576](torch),
E         i64[2,184](torch),
E         i64[2,1132](torch),
E         i64[2,140](torch),
E         i64[2,1414](torch),
E         i64[2,854](torch),
E         i64[2,608](torch),
E         i64[2,520](torch),
E         i64[2,186](torch),
E         i64[2,896](torch),
E         i64[2,366](torch),
E         i64[2,296](torch),
E         i64[2,764](torch),
E         i64[2,42](torch),
E         i64[2,1098](torch),
E         i64[2,1066](torch),
E         i64[2,1864](torch),
E         i64[2,76](torch)
E       ]
E       Expected type: collections.abc.Sequence[Int[Tensor, '2 edges']].
E       ----------------------
E       Called with parameters: {
E         'edge_indices':
E         [
E           i64[2,702](torch),
E           i64[2,508](torch),
E           i64[2,4](torch),
E           i64[2,12](torch),
E           i64[2,1688](torch),
E           i64[2,76](torch),
E           i64[2,1144](torch),
E           i64[2,136](torch),
E           i64[2,1794](torch),
E           i64[2,1706](torch),
E           i64[2,368](torch),
E           i64[2,320](torch),
E           i64[2,1136](torch),
E           i64[2,434](torch),
E           i64[2,1192](torch),
E           i64[2,1300](torch),
E           i64[2,166](torch),
E           i64[2,1596](torch),
E           i64[2,328](torch),
E           i64[2,1474](torch),
E           i64[2,576](torch),
E           i64[2,66](torch),
E           i64[2,1878](torch),
E           i64[2,22](torch),
E           i64[2,1176](torch),
E           i64[2,1846](torch),
E           i64[2,66](torch),
E           i64[2,92](torch),
E           i64[2,1130](torch),
E           i64[2,1496](torch),
E           i64[2,14](torch),
E           i64[2,1532](torch),
E           i64[2,38](torch),
E           i64[2,50](torch),
E           i64[2,670](torch),
E           i64[2,466](torch),
E           i64[2,152](torch),
E           i64[2,1512](torch),
E           i64[2,48](torch),
E           i64[2,248](torch),
E           i64[2,194](torch),
E           i64[2,488](torch),
E           i64[2,570](torch),
E           i64[2,1670](torch),
E           i64[2,1008](torch),
E           i64[2,414](torch),
E           i64[2,1576](torch),
E           i64[2,184](torch),
E           i64[2,1132](torch),
E           i64[2,140](torch),
E           i64[2,1414](torch),
E           i64[2,854](torch),
E           i64[2,608](torch),
E           i64[2,520](torch),
E           i64[2,186](torch),
E           i64[2,896](torch),
E           i64[2,366](torch),
E           i64[2,296](torch),
E           i64[2,764](torch),
E           i64[2,42](torch),
E           i64[2,1098](torch),
E           i64[2,1066](torch),
E           i64[2,1864](torch),
E           i64[2,76](torch)
E         ]
E       }
E       Parameter annotations: (edge_indices: collections.abc.Sequence[Int[Tensor, '2 edges']]) -> Any.
E       The current values for each jaxtyping axis annotation are as follows.
E       edges=702

tests/test_data_utils.py:19: TypeCheckError
___________________ TestMPNNBatching.test_mpnn_collate_diag ____________________

param_signature = <Signature (batch: list[graphmodels.datasets.mpnn_dataset.MPNNEntry]) -> Any>
args = ([SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0,  ..., 1..., 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...],)
kwargs = {}
arguments = {'batch': [SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0...3, 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...]}
module = 'graphmodels.data_utils'
typechecker = <function typechecked at 0x7fc60606f5b0>

    def _get_problem_arg(
        param_signature: inspect.Signature, args, kwargs, arguments, module, typechecker
    ) -> NoReturn:
        """Determines which argument was likely to be the problematic one responsible for
        raising a type-check error.
    
        It returns the result by raising an Exception: you should grab this and extract the
        string out of it. We do this, rather than just returning the value, to aid debugging
        by making it possible to walk down the stack to the issue.
        """
        # No performance concerns, as this is only used when we're about to raise an error
        # anyway.
        for keep_name in param_signature.parameters.keys():
            new_parameters = []
            keep_annotation = sentinel = object()
            for p_name, p in param_signature.parameters.items():
                if p_name == keep_name:
                    new_parameters.append(
                        inspect.Parameter(
                            p.name, p.kind, default=p.default, annotation=p.annotation
                        )
                    )
                    assert keep_annotation is sentinel
                    keep_annotation = _remove_typing(p.annotation)
                else:
                    new_parameters.append(
                        inspect.Parameter(p.name, p.kind, default=p.default)
                    )
            assert keep_annotation is not sentinel
            new_signature = inspect.Signature(new_parameters)
            fn = _make_fn_with_signature(
                "check_single_arg", "check_single_arg", module, new_signature, output=False
            )
            fn = _apply_typechecker(
                typechecker, fn
            )  # but no `jaxtyped`; keep the same environment.
            try:
>               fn(*args, **kwargs)

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = ([SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0,  ..., 1..., 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...],)
kwargs = {}, memo = <typeguard._CallMemo object at 0x7fc52022fa00>

    def wrapper(*args, **kwargs):
        memo = _CallMemo(python_func, _localns, args=args, kwargs=kwargs)
>       check_argument_types(memo)

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/typeguard/__init__.py:1032: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

memo = <typeguard._CallMemo object at 0x7fc52022fa00>

    def check_argument_types(memo: Optional[_CallMemo] = None) -> bool:
        """
        Check that the argument values match the annotated types.
    
        Unless both ``args`` and ``kwargs`` are provided, the information will be retrieved from
        the previous stack frame (ie. from the function that called this).
    
        :return: ``True``
        :raises TypeError: if there is an argument type mismatch
    
        """
        if memo is None:
            # faster than inspect.currentframe(), but not officially
            # supported in all python implementations
            frame = sys._getframe(1)
    
            try:
                func = find_function(frame)
            except LookupError:
                return True  # This can happen with the Pydev/PyCharm debugger extension installed
    
            memo = _CallMemo(func, frame.f_locals)
    
        for argname, expected_type in memo.type_hints.items():
            if argname != 'return' and argname in memo.arguments:
                value = memo.arguments[argname]
                description = 'argument "{}"'.format(argname)
                try:
                    check_type(description, value, expected_type, memo)
                except TypeError as exc:  # suppress unnecessarily long tracebacks
>                   raise TypeError(*exc.args) from None
E                   TypeError: type of argument "batch"[0] must be graphmodels.datasets.mpnn_dataset.MPNNEntry; got data_helpers.SampleEntry instead

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/typeguard/__init__.py:875: TypeError

The above exception was the direct cause of the following exception:

args = ([SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0,  ..., 1..., 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...],)
kwargs = {}
bound = <BoundArguments (batch=[SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
   ...7,  9, 11, 12, 13, 14, 15, 16,
         17, 18, 19, 20]]), target=tensor([0.9354]), total_nodes=23, total_edges=364)])>
memos = ({}, {}, {}, {'batch': [SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
   ..., 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...]})

    def wrapped_fn_impl(args, kwargs, bound, memos):
        __tracebackhide__ = True
        # First type-check just the parameters before the function is
        # called.
        try:
            param_fn(*args, **kwargs)
        except AnnotationError:
            raise
        except Exception:
            try:
>               argmsg = _get_problem_arg(
                    param_signature,
                    args,
                    kwargs,
                    bound.arguments,
                    module,
                    typechecker,
                )

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

param_signature = <Signature (batch: list[graphmodels.datasets.mpnn_dataset.MPNNEntry]) -> Any>
args = ([SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0,  ..., 1..., 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...],)
kwargs = {}
arguments = {'batch': [SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        [0, 1, 0...3, 43, 43],
        [ 1,  3,  7,  ..., 40, 41, 42]]), target=tensor([0.6596]), total_nodes=44, total_edges=1426), ...]}
module = 'graphmodels.data_utils'
typechecker = <function typechecked at 0x7fc60606f5b0>

    def _get_problem_arg(
        param_signature: inspect.Signature, args, kwargs, arguments, module, typechecker
    ) -> NoReturn:
        """Determines which argument was likely to be the problematic one responsible for
        raising a type-check error.
    
        It returns the result by raising an Exception: you should grab this and extract the
        string out of it. We do this, rather than just returning the value, to aid debugging
        by making it possible to walk down the stack to the issue.
        """
        # No performance concerns, as this is only used when we're about to raise an error
        # anyway.
        for keep_name in param_signature.parameters.keys():
            new_parameters = []
            keep_annotation = sentinel = object()
            for p_name, p in param_signature.parameters.items():
                if p_name == keep_name:
                    new_parameters.append(
                        inspect.Parameter(
                            p.name, p.kind, default=p.default, annotation=p.annotation
                        )
                    )
                    assert keep_annotation is sentinel
                    keep_annotation = _remove_typing(p.annotation)
                else:
                    new_parameters.append(
                        inspect.Parameter(p.name, p.kind, default=p.default)
                    )
            assert keep_annotation is not sentinel
            new_signature = inspect.Signature(new_parameters)
            fn = _make_fn_with_signature(
                "check_single_arg", "check_single_arg", module, new_signature, output=False
            )
            fn = _apply_typechecker(
                typechecker, fn
            )  # but no `jaxtyped`; keep the same environment.
            try:
                fn(*args, **kwargs)
            except Exception as e:
                keep_value = _pformat(arguments[keep_name], short_self=False)
>               raise TypeCheckError(
                    f"\nThe problem arose whilst typechecking parameter '{keep_name}'.\n"
                    f"Actual value: {keep_value}\n"
                    f"Expected type: {keep_annotation}."
                ) from e
E               jaxtyping.TypeCheckError: 
E               The problem arose whilst typechecking parameter 'batch'.
E               Actual value: [
E                 SampleEntry(
E                   adj_matrix=i64[39,39](torch),
E                   edge_features=f32[1082,24](torch),
E                   node_features=f32[39,136](torch),
E                   edge_indices=i64[2,1082](torch),
E                   target=f32[1](torch),
E                   total_nodes=39,
E                   total_edges=1082
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[17,17](torch),
E                   edge_features=f32[214,24](torch),
E                   node_features=f32[17,136](torch),
E                   edge_indices=i64[2,214](torch),
E                   target=f32[1](torch),
E                   total_nodes=17,
E                   total_edges=214
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[27,27](torch),
E                   edge_features=f32[506,24](torch),
E                   node_features=f32[27,136](torch),
E                   edge_indices=i64[2,506](torch),
E                   target=f32[1](torch),
E                   total_nodes=27,
E                   total_edges=506
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[8,8](torch),
E                   edge_features=f32[36,24](torch),
E                   node_features=f32[8,136](torch),
E                   edge_indices=i64[2,36](torch),
E                   target=f32[1](torch),
E                   total_nodes=8,
E                   total_edges=36
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[45,45](torch),
E                   edge_features=f32[1514,24](torch),
E                   node_features=f32[45,136](torch),
E                   edge_indices=i64[2,1514](torch),
E                   target=f32[1](torch),
E                   total_nodes=45,
E                   total_edges=1514
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[44,44](torch),
E                   edge_features=f32[1426,24](torch),
E                   node_features=f32[44,136](torch),
E                   edge_indices=i64[2,1426](torch),
E                   target=f32[1](torch),
E                   total_nodes=44,
E                   total_edges=1426
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[7,7](torch),
E                   edge_features=f32[28,24](torch),
E                   node_features=f32[7,136](torch),
E                   edge_indices=i64[2,28](torch),
E                   target=f32[1](torch),
E                   total_nodes=7,
E                   total_edges=28
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[11,11](torch),
E                   edge_features=f32[86,24](torch),
E                   node_features=f32[11,136](torch),
E                   edge_indices=i64[2,86](torch),
E                   target=f32[1](torch),
E                   total_nodes=11,
E                   total_edges=86
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[49,49](torch),
E                   edge_features=f32[1752,24](torch),
E                   node_features=f32[49,136](torch),
E                   edge_indices=i64[2,1752](torch),
E                   target=f32[1](torch),
E                   total_nodes=49,
E                   total_edges=1752
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[50,50](torch),
E                   edge_features=f32[1866,24](torch),
E                   node_features=f32[50,136](torch),
E                   edge_indices=i64[2,1866](torch),
E                   target=f32[1](torch),
E                   total_nodes=50,
E                   total_edges=1866
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[34,34](torch),
E                   edge_features=f32[856,24](torch),
E                   node_features=f32[34,136](torch),
E                   edge_indices=i64[2,856](torch),
E                   target=f32[1](torch),
E                   total_nodes=34,
E                   total_edges=856
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[34,34](torch),
E                   edge_features=f32[850,24](torch),
E                   node_features=f32[34,136](torch),
E                   edge_indices=i64[2,850](torch),
E                   target=f32[1](torch),
E                   total_nodes=34,
E                   total_edges=850
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[37,37](torch),
E                   edge_features=f32[1038,24](torch),
E                   node_features=f32[37,136](torch),
E                   edge_indices=i64[2,1038](torch),
E                   target=f32[1](torch),
E                   total_nodes=37,
E                   total_edges=1038
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[27,27](torch),
E                   edge_features=f32[520,24](torch),
E                   node_features=f32[27,136](torch),
E                   edge_indices=i64[2,520](torch),
E                   target=f32[1](torch),
E                   total_nodes=27,
E                   total_edges=520
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[18,18](torch),
E                   edge_features=f32[234,24](torch),
E                   node_features=f32[18,136](torch),
E                   edge_indices=i64[2,234](torch),
E                   target=f32[1](torch),
E                   total_nodes=18,
E                   total_edges=234
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[22,22](torch),
E                   edge_features=f32[340,24](torch),
E                   node_features=f32[22,136](torch),
E                   edge_indices=i64[2,340](torch),
E                   target=f32[1](torch),
E                   total_nodes=22,
E                   total_edges=340
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[20,20](torch),
E                   edge_features=f32[290,24](torch),
E                   node_features=f32[20,136](torch),
E                   edge_indices=i64[2,290](torch),
E                   target=f32[1](torch),
E                   total_nodes=20,
E                   total_edges=290
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[41,41](torch),
E                   edge_features=f32[1188,24](torch),
E                   node_features=f32[41,136](torch),
E                   edge_indices=i64[2,1188](torch),
E                   target=f32[1](torch),
E                   total_nodes=41,
E                   total_edges=1188
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[40,40](torch),
E                   edge_features=f32[1148,24](torch),
E                   node_features=f32[40,136](torch),
E                   edge_indices=i64[2,1148](torch),
E                   target=f32[1](torch),
E                   total_nodes=40,
E                   total_edges=1148
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[14,14](torch),
E                   edge_features=f32[130,24](torch),
E                   node_features=f32[14,136](torch),
E                   edge_indices=i64[2,130](torch),
E                   target=f32[1](torch),
E                   total_nodes=14,
E                   total_edges=130
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[28,28](torch),
E                   edge_features=f32[566,24](torch),
E                   node_features=f32[28,136](torch),
E                   edge_indices=i64[2,566](torch),
E                   target=f32[1](torch),
E                   total_nodes=28,
E                   total_edges=566
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[20,20](torch),
E                   edge_features=f32[284,24](torch),
E                   node_features=f32[20,136](torch),
E                   edge_indices=i64[2,284](torch),
E                   target=f32[1](torch),
E                   total_nodes=20,
E                   total_edges=284
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[14,14](torch),
E                   edge_features=f32[136,24](torch),
E                   node_features=f32[14,136](torch),
E                   edge_indices=i64[2,136](torch),
E                   target=f32[1](torch),
E                   total_nodes=14,
E                   total_edges=136
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[46,46](torch),
E                   edge_features=f32[1604,24](torch),
E                   node_features=f32[46,136](torch),
E                   edge_indices=i64[2,1604](torch),
E                   target=f32[1](torch),
E                   total_nodes=46,
E                   total_edges=1604
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[8,8](torch),
E                   edge_features=f32[44,24](torch),
E                   node_features=f32[8,136](torch),
E                   edge_indices=i64[2,44](torch),
E                   target=f32[1](torch),
E                   total_nodes=8,
E                   total_edges=44
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[14,14](torch),
E                   edge_features=f32[120,24](torch),
E                   node_features=f32[14,136](torch),
E                   edge_indices=i64[2,120](torch),
E                   target=f32[1](torch),
E                   total_nodes=14,
E                   total_edges=120
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[48,48](torch),
E                   edge_features=f32[1736,24](torch),
E                   node_features=f32[48,136](torch),
E                   edge_indices=i64[2,1736](torch),
E                   target=f32[1](torch),
E                   total_nodes=48,
E                   total_edges=1736
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[5,5](torch),
E                   edge_features=f32[18,24](torch),
E                   node_features=f32[5,136](torch),
E                   edge_indices=i64[2,18](torch),
E                   target=f32[1](torch),
E                   total_nodes=5,
E                   total_edges=18
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[4,4](torch),
E                   edge_features=f32[6,24](torch),
E                   node_features=f32[4,136](torch),
E                   edge_indices=i64[2,6](torch),
E                   target=f32[1](torch),
E                   total_nodes=4,
E                   total_edges=6
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[12,12](torch),
E                   edge_features=f32[98,24](torch),
E                   node_features=f32[12,136](torch),
E                   edge_indices=i64[2,98](torch),
E                   target=f32[1](torch),
E                   total_nodes=12,
E                   total_edges=98
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[48,48](torch),
E                   edge_features=f32[1698,24](torch),
E                   node_features=f32[48,136](torch),
E                   edge_indices=i64[2,1698](torch),
E                   target=f32[1](torch),
E                   total_nodes=48,
E                   total_edges=1698
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[15,15](torch),
E                   edge_features=f32[152,24](torch),
E                   node_features=f32[15,136](torch),
E                   edge_indices=i64[2,152](torch),
E                   target=f32[1](torch),
E                   total_nodes=15,
E                   total_edges=152
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[20,20](torch),
E                   edge_features=f32[304,24](torch),
E                   node_features=f32[20,136](torch),
E                   edge_indices=i64[2,304](torch),
E                   target=f32[1](torch),
E                   total_nodes=20,
E                   total_edges=304
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[48,48](torch),
E                   edge_features=f32[1656,24](torch),
E                   node_features=f32[48,136](torch),
E                   edge_indices=i64[2,1656](torch),
E                   target=f32[1](torch),
E                   total_nodes=48,
E                   total_edges=1656
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[25,25](torch),
E                   edge_features=f32[440,24](torch),
E                   node_features=f32[25,136](torch),
E                   edge_indices=i64[2,440](torch),
E                   target=f32[1](torch),
E                   total_nodes=25,
E                   total_edges=440
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[17,17](torch),
E                   edge_features=f32[204,24](torch),
E                   node_features=f32[17,136](torch),
E                   edge_indices=i64[2,204](torch),
E                   target=f32[1](torch),
E                   total_nodes=17,
E                   total_edges=204
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[17,17](torch),
E                   edge_features=f32[206,24](torch),
E                   node_features=f32[17,136](torch),
E                   edge_indices=i64[2,206](torch),
E                   target=f32[1](torch),
E                   total_nodes=17,
E                   total_edges=206
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[14,14](torch),
E                   edge_features=f32[130,24](torch),
E                   node_features=f32[14,136](torch),
E                   edge_indices=i64[2,130](torch),
E                   target=f32[1](torch),
E                   total_nodes=14,
E                   total_edges=130
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[16,16](torch),
E                   edge_features=f32[166,24](torch),
E                   node_features=f32[16,136](torch),
E                   edge_indices=i64[2,166](torch),
E                   target=f32[1](torch),
E                   total_nodes=16,
E                   total_edges=166
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[40,40](torch),
E                   edge_features=f32[1170,24](torch),
E                   node_features=f32[40,136](torch),
E                   edge_indices=i64[2,1170](torch),
E                   target=f32[1](torch),
E                   total_nodes=40,
E                   total_edges=1170
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[31,31](torch),
E                   edge_features=f32[686,24](torch),
E                   node_features=f32[31,136](torch),
E                   edge_indices=i64[2,686](torch),
E                   target=f32[1](torch),
E                   total_nodes=31,
E                   total_edges=686
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[36,36](torch),
E                   edge_features=f32[938,24](torch),
E                   node_features=f32[36,136](torch),
E                   edge_indices=i64[2,938](torch),
E                   target=f32[1](torch),
E                   total_nodes=36,
E                   total_edges=938
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[48,48](torch),
E                   edge_features=f32[1694,24](torch),
E                   node_features=f32[48,136](torch),
E                   edge_indices=i64[2,1694](torch),
E                   target=f32[1](torch),
E                   total_nodes=48,
E                   total_edges=1694
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[44,44](torch),
E                   edge_features=f32[1418,24](torch),
E                   node_features=f32[44,136](torch),
E                   edge_indices=i64[2,1418](torch),
E                   target=f32[1](torch),
E                   total_nodes=44,
E                   total_edges=1418
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[28,28](torch),
E                   edge_features=f32[584,24](torch),
E                   node_features=f32[28,136](torch),
E                   edge_indices=i64[2,584](torch),
E                   target=f32[1](torch),
E                   total_nodes=28,
E                   total_edges=584
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[34,34](torch),
E                   edge_features=f32[826,24](torch),
E                   node_features=f32[34,136](torch),
E                   edge_indices=i64[2,826](torch),
E                   target=f32[1](torch),
E                   total_nodes=34,
E                   total_edges=826
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[47,47](torch),
E                   edge_features=f32[1640,24](torch),
E                   node_features=f32[47,136](torch),
E                   edge_indices=i64[2,1640](torch),
E                   target=f32[1](torch),
E                   total_nodes=47,
E                   total_edges=1640
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[20,20](torch),
E                   edge_features=f32[296,24](torch),
E                   node_features=f32[20,136](torch),
E                   edge_indices=i64[2,296](torch),
E                   target=f32[1](torch),
E                   total_nodes=20,
E                   total_edges=296
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[16,16](torch),
E                   edge_features=f32[168,24](torch),
E                   node_features=f32[16,136](torch),
E                   edge_indices=i64[2,168](torch),
E                   target=f32[1](torch),
E                   total_nodes=16,
E                   total_edges=168
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[3,3](torch),
E                   edge_features=f32[4,24](torch),
E                   node_features=f32[3,136](torch),
E                   edge_indices=i64[2,4](torch),
E                   target=f32[1](torch),
E                   total_nodes=3,
E                   total_edges=4
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[7,7](torch),
E                   edge_features=f32[20,24](torch),
E                   node_features=f32[7,136](torch),
E                   edge_indices=i64[2,20](torch),
E                   target=f32[1](torch),
E                   total_nodes=7,
E                   total_edges=20
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[22,22](torch),
E                   edge_features=f32[344,24](torch),
E                   node_features=f32[22,136](torch),
E                   edge_indices=i64[2,344](torch),
E                   target=f32[1](torch),
E                   total_nodes=22,
E                   total_edges=344
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[2,2](torch),
E                   edge_features=f32[2,24](torch),
E                   node_features=f32[2,136](torch),
E                   edge_indices=i64[2,2](torch),
E                   target=f32[1](torch),
E                   total_nodes=2,
E                   total_edges=2
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[6,6](torch),
E                   edge_features=f32[22,24](torch),
E                   node_features=f32[6,136](torch),
E                   edge_indices=i64[2,22](torch),
E                   target=f32[1](torch),
E                   total_nodes=6,
E                   total_edges=22
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[31,31](torch),
E                   edge_features=f32[732,24](torch),
E                   node_features=f32[31,136](torch),
E                   edge_indices=i64[2,732](torch),
E                   target=f32[1](torch),
E                   total_nodes=31,
E                   total_edges=732
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[5,5](torch),
E                   edge_features=f32[12,24](torch),
E                   node_features=f32[5,136](torch),
E                   edge_indices=i64[2,12](torch),
E                   target=f32[1](torch),
E                   total_nodes=5,
E                   total_edges=12
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[3,3](torch),
E                   edge_features=f32[6,24](torch),
E                   node_features=f32[3,136](torch),
E                   edge_indices=i64[2,6](torch),
E                   target=f32[1](torch),
E                   total_nodes=3,
E                   total_edges=6
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[21,21](torch),
E                   edge_features=f32[308,24](torch),
E                   node_features=f32[21,136](torch),
E                   edge_indices=i64[2,308](torch),
E                   target=f32[1](torch),
E                   total_nodes=21,
E                   total_edges=308
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[46,46](torch),
E                   edge_features=f32[1540,24](torch),
E                   node_features=f32[46,136](torch),
E                   edge_indices=i64[2,1540](torch),
E                   target=f32[1](torch),
E                   total_nodes=46,
E                   total_edges=1540
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[48,48](torch),
E                   edge_features=f32[1670,24](torch),
E                   node_features=f32[48,136](torch),
E                   edge_indices=i64[2,1670](torch),
E                   target=f32[1](torch),
E                   total_nodes=48,
E                   total_edges=1670
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[18,18](torch),
E                   edge_features=f32[242,24](torch),
E                   node_features=f32[18,136](torch),
E                   edge_indices=i64[2,242](torch),
E                   target=f32[1](torch),
E                   total_nodes=18,
E                   total_edges=242
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[37,37](torch),
E                   edge_features=f32[1066,24](torch),
E                   node_features=f32[37,136](torch),
E                   edge_indices=i64[2,1066](torch),
E                   target=f32[1](torch),
E                   total_nodes=37,
E                   total_edges=1066
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[33,33](torch),
E                   edge_features=f32[768,24](torch),
E                   node_features=f32[33,136](torch),
E                   edge_indices=i64[2,768](torch),
E                   target=f32[1](torch),
E                   total_nodes=33,
E                   total_edges=768
E                 ),
E                 SampleEntry(
E                   adj_matrix=i64[23,23](torch),
E                   edge_features=f32[364,24](torch),
E                   node_features=f32[23,136](torch),
E                   edge_indices=i64[2,364](torch),
E                   target=f32[1](torch),
E                   total_nodes=23,
E                   total_edges=364
E                 )
E               ]
E               Expected type: list[graphmodels.datasets.mpnn_dataset.MPNNEntry].

../../anaconda3/envs/cheminformatics-env/lib/python3.10/site-packages/jaxtyping/_decorator.py:756: TypeCheckError

The above exception was the direct cause of the following exception:

self = <test_data_utils.TestMPNNBatching object at 0x7fc520425ba0>
batch = SampleBatch(dsets=[SampleEntry(adj_matrix=tensor([[0, 1, 0,  ..., 0, 1, 0],
        [1, 0, 1,  ..., 1, 1, 0],
        ...    17, 18, 19, 20]]), target=tensor([0.9354]), total_nodes=23, total_edges=364)], total_nodes=1652, total_edges=41192)

    def test_mpnn_collate_diag(self, batch):
>       collated_dataset = data_utils.mpnn_collate_diag(batch.dsets)
E       jaxtyping.TypeCheckError: Type-check error whilst checking the parameters of graphmodels.data_utils.mpnn_collate_diag.
E       The problem arose whilst typechecking parameter 'batch'.
E       Actual value: [
E         SampleEntry(
E           adj_matrix=i64[39,39](torch),
E           edge_features=f32[1082,24](torch),
E           node_features=f32[39,136](torch),
E           edge_indices=i64[2,1082](torch),
E           target=f32[1](torch),
E           total_nodes=39,
E           total_edges=1082
E         ),
E         SampleEntry(
E           adj_matrix=i64[17,17](torch),
E           edge_features=f32[214,24](torch),
E           node_features=f32[17,136](torch),
E           edge_indices=i64[2,214](torch),
E           target=f32[1](torch),
E           total_nodes=17,
E           total_edges=214
E         ),
E         SampleEntry(
E           adj_matrix=i64[27,27](torch),
E           edge_features=f32[506,24](torch),
E           node_features=f32[27,136](torch),
E           edge_indices=i64[2,506](torch),
E           target=f32[1](torch),
E           total_nodes=27,
E           total_edges=506
E         ),
E         SampleEntry(
E           adj_matrix=i64[8,8](torch),
E           edge_features=f32[36,24](torch),
E           node_features=f32[8,136](torch),
E           edge_indices=i64[2,36](torch),
E           target=f32[1](torch),
E           total_nodes=8,
E           total_edges=36
E         ),
E         SampleEntry(
E           adj_matrix=i64[45,45](torch),
E           edge_features=f32[1514,24](torch),
E           node_features=f32[45,136](torch),
E           edge_indices=i64[2,1514](torch),
E           target=f32[1](torch),
E           total_nodes=45,
E           total_edges=1514
E         ),
E         SampleEntry(
E           adj_matrix=i64[44,44](torch),
E           edge_features=f32[1426,24](torch),
E           node_features=f32[44,136](torch),
E           edge_indices=i64[2,1426](torch),
E           target=f32[1](torch),
E           total_nodes=44,
E           total_edges=1426
E         ),
E         SampleEntry(
E           adj_matrix=i64[7,7](torch),
E           edge_features=f32[28,24](torch),
E           node_features=f32[7,136](torch),
E           edge_indices=i64[2,28](torch),
E           target=f32[1](torch),
E           total_nodes=7,
E           total_edges=28
E         ),
E         SampleEntry(
E           adj_matrix=i64[11,11](torch),
E           edge_features=f32[86,24](torch),
E           node_features=f32[11,136](torch),
E           edge_indices=i64[2,86](torch),
E           target=f32[1](torch),
E           total_nodes=11,
E           total_edges=86
E         ),
E         SampleEntry(
E           adj_matrix=i64[49,49](torch),
E           edge_features=f32[1752,24](torch),
E           node_features=f32[49,136](torch),
E           edge_indices=i64[2,1752](torch),
E           target=f32[1](torch),
E           total_nodes=49,
E           total_edges=1752
E         ),
E         SampleEntry(
E           adj_matrix=i64[50,50](torch),
E           edge_features=f32[1866,24](torch),
E           node_features=f32[50,136](torch),
E           edge_indices=i64[2,1866](torch),
E           target=f32[1](torch),
E           total_nodes=50,
E           total_edges=1866
E         ),
E         SampleEntry(
E           adj_matrix=i64[34,34](torch),
E           edge_features=f32[856,24](torch),
E           node_features=f32[34,136](torch),
E           edge_indices=i64[2,856](torch),
E           target=f32[1](torch),
E           total_nodes=34,
E           total_edges=856
E         ),
E         SampleEntry(
E           adj_matrix=i64[34,34](torch),
E           edge_features=f32[850,24](torch),
E           node_features=f32[34,136](torch),
E           edge_indices=i64[2,850](torch),
E           target=f32[1](torch),
E           total_nodes=34,
E           total_edges=850
E         ),
E         SampleEntry(
E           adj_matrix=i64[37,37](torch),
E           edge_features=f32[1038,24](torch),
E           node_features=f32[37,136](torch),
E           edge_indices=i64[2,1038](torch),
E           target=f32[1](torch),
E           total_nodes=37,
E           total_edges=1038
E         ),
E         SampleEntry(
E           adj_matrix=i64[27,27](torch),
E           edge_features=f32[520,24](torch),
E           node_features=f32[27,136](torch),
E           edge_indices=i64[2,520](torch),
E           target=f32[1](torch),
E           total_nodes=27,
E           total_edges=520
E         ),
E         SampleEntry(
E           adj_matrix=i64[18,18](torch),
E           edge_features=f32[234,24](torch),
E           node_features=f32[18,136](torch),
E           edge_indices=i64[2,234](torch),
E           target=f32[1](torch),
E           total_nodes=18,
E           total_edges=234
E         ),
E         SampleEntry(
E           adj_matrix=i64[22,22](torch),
E           edge_features=f32[340,24](torch),
E           node_features=f32[22,136](torch),
E           edge_indices=i64[2,340](torch),
E           target=f32[1](torch),
E           total_nodes=22,
E           total_edges=340
E         ),
E         SampleEntry(
E           adj_matrix=i64[20,20](torch),
E           edge_features=f32[290,24](torch),
E           node_features=f32[20,136](torch),
E           edge_indices=i64[2,290](torch),
E           target=f32[1](torch),
E           total_nodes=20,
E           total_edges=290
E         ),
E         SampleEntry(
E           adj_matrix=i64[41,41](torch),
E           edge_features=f32[1188,24](torch),
E           node_features=f32[41,136](torch),
E           edge_indices=i64[2,1188](torch),
E           target=f32[1](torch),
E           total_nodes=41,
E           total_edges=1188
E         ),
E         SampleEntry(
E           adj_matrix=i64[40,40](torch),
E           edge_features=f32[1148,24](torch),
E           node_features=f32[40,136](torch),
E           edge_indices=i64[2,1148](torch),
E           target=f32[1](torch),
E           total_nodes=40,
E           total_edges=1148
E         ),
E         SampleEntry(
E           adj_matrix=i64[14,14](torch),
E           edge_features=f32[130,24](torch),
E           node_features=f32[14,136](torch),
E           edge_indices=i64[2,130](torch),
E           target=f32[1](torch),
E           total_nodes=14,
E           total_edges=130
E         ),
E         SampleEntry(
E           adj_matrix=i64[28,28](torch),
E           edge_features=f32[566,24](torch),
E           node_features=f32[28,136](torch),
E           edge_indices=i64[2,566](torch),
E           target=f32[1](torch),
E           total_nodes=28,
E           total_edges=566
E         ),
E         SampleEntry(
E           adj_matrix=i64[20,20](torch),
E           edge_features=f32[284,24](torch),
E           node_features=f32[20,136](torch),
E           edge_indices=i64[2,284](torch),
E           target=f32[1](torch),
E           total_nodes=20,
E           total_edges=284
E         ),
E         SampleEntry(
E           adj_matrix=i64[14,14](torch),
E           edge_features=f32[136,24](torch),
E           node_features=f32[14,136](torch),
E           edge_indices=i64[2,136](torch),
E           target=f32[1](torch),
E           total_nodes=14,
E           total_edges=136
E         ),
E         SampleEntry(
E           adj_matrix=i64[46,46](torch),
E           edge_features=f32[1604,24](torch),
E           node_features=f32[46,136](torch),
E           edge_indices=i64[2,1604](torch),
E           target=f32[1](torch),
E           total_nodes=46,
E           total_edges=1604
E         ),
E         SampleEntry(
E           adj_matrix=i64[8,8](torch),
E           edge_features=f32[44,24](torch),
E           node_features=f32[8,136](torch),
E           edge_indices=i64[2,44](torch),
E           target=f32[1](torch),
E           total_nodes=8,
E           total_edges=44
E         ),
E         SampleEntry(
E           adj_matrix=i64[14,14](torch),
E           edge_features=f32[120,24](torch),
E           node_features=f32[14,136](torch),
E           edge_indices=i64[2,120](torch),
E           target=f32[1](torch),
E           total_nodes=14,
E           total_edges=120
E         ),
E         SampleEntry(
E           adj_matrix=i64[48,48](torch),
E           edge_features=f32[1736,24](torch),
E           node_features=f32[48,136](torch),
E           edge_indices=i64[2,1736](torch),
E           target=f32[1](torch),
E           total_nodes=48,
E           total_edges=1736
E         ),
E         SampleEntry(
E           adj_matrix=i64[5,5](torch),
E           edge_features=f32[18,24](torch),
E           node_features=f32[5,136](torch),
E           edge_indices=i64[2,18](torch),
E           target=f32[1](torch),
E           total_nodes=5,
E           total_edges=18
E         ),
E         SampleEntry(
E           adj_matrix=i64[4,4](torch),
E           edge_features=f32[6,24](torch),
E           node_features=f32[4,136](torch),
E           edge_indices=i64[2,6](torch),
E           target=f32[1](torch),
E           total_nodes=4,
E           total_edges=6
E         ),
E         SampleEntry(
E           adj_matrix=i64[12,12](torch),
E           edge_features=f32[98,24](torch),
E           node_features=f32[12,136](torch),
E           edge_indices=i64[2,98](torch),
E           target=f32[1](torch),
E           total_nodes=12,
E           total_edges=98
E         ),
E         SampleEntry(
E           adj_matrix=i64[48,48](torch),
E           edge_features=f32[1698,24](torch),
E           node_features=f32[48,136](torch),
E           edge_indices=i64[2,1698](torch),
E           target=f32[1](torch),
E           total_nodes=48,
E           total_edges=1698
E         ),
E         SampleEntry(
E           adj_matrix=i64[15,15](torch),
E           edge_features=f32[152,24](torch),
E           node_features=f32[15,136](torch),
E           edge_indices=i64[2,152](torch),
E           target=f32[1](torch),
E           total_nodes=15,
E           total_edges=152
E         ),
E         SampleEntry(
E           adj_matrix=i64[20,20](torch),
E           edge_features=f32[304,24](torch),
E           node_features=f32[20,136](torch),
E           edge_indices=i64[2,304](torch),
E           target=f32[1](torch),
E           total_nodes=20,
E           total_edges=304
E         ),
E         SampleEntry(
E           adj_matrix=i64[48,48](torch),
E           edge_features=f32[1656,24](torch),
E           node_features=f32[48,136](torch),
E           edge_indices=i64[2,1656](torch),
E           target=f32[1](torch),
E           total_nodes=48,
E           total_edges=1656
E         ),
E         SampleEntry(
E           adj_matrix=i64[25,25](torch),
E           edge_features=f32[440,24](torch),
E           node_features=f32[25,136](torch),
E           edge_indices=i64[2,440](torch),
E           target=f32[1](torch),
E           total_nodes=25,
E           total_edges=440
E         ),
E         SampleEntry(
E           adj_matrix=i64[17,17](torch),
E           edge_features=f32[204,24](torch),
E           node_features=f32[17,136](torch),
E           edge_indices=i64[2,204](torch),
E           target=f32[1](torch),
E           total_nodes=17,
E           total_edges=204
E         ),
E         SampleEntry(
E           adj_matrix=i64[17,17](torch),
E           edge_features=f32[206,24](torch),
E           node_features=f32[17,136](torch),
E           edge_indices=i64[2,206](torch),
E           target=f32[1](torch),
E           total_nodes=17,
E           total_edges=206
E         ),
E         SampleEntry(
E           adj_matrix=i64[14,14](torch),
E           edge_features=f32[130,24](torch),
E           node_features=f32[14,136](torch),
E           edge_indices=i64[2,130](torch),
E           target=f32[1](torch),
E           total_nodes=14,
E           total_edges=130
E         ),
E         SampleEntry(
E           adj_matrix=i64[16,16](torch),
E           edge_features=f32[166,24](torch),
E           node_features=f32[16,136](torch),
E           edge_indices=i64[2,166](torch),
E           target=f32[1](torch),
E           total_nodes=16,
E           total_edges=166
E         ),
E         SampleEntry(
E           adj_matrix=i64[40,40](torch),
E           edge_features=f32[1170,24](torch),
E           node_features=f32[40,136](torch),
E           edge_indices=i64[2,1170](torch),
E           target=f32[1](torch),
E           total_nodes=40,
E           total_edges=1170
E         ),
E         SampleEntry(
E           adj_matrix=i64[31,31](torch),
E           edge_features=f32[686,24](torch),
E           node_features=f32[31,136](torch),
E           edge_indices=i64[2,686](torch),
E           target=f32[1](torch),
E           total_nodes=31,
E           total_edges=686
E         ),
E         SampleEntry(
E           adj_matrix=i64[36,36](torch),
E           edge_features=f32[938,24](torch),
E           node_features=f32[36,136](torch),
E           edge_indices=i64[2,938](torch),
E           target=f32[1](torch),
E           total_nodes=36,
E           total_edges=938
E         ),
E         SampleEntry(
E           adj_matrix=i64[48,48](torch),
E           edge_features=f32[1694,24](torch),
E           node_features=f32[48,136](torch),
E           edge_indices=i64[2,1694](torch),
E           target=f32[1](torch),
E           total_nodes=48,
E           total_edges=1694
E         ),
E         SampleEntry(
E           adj_matrix=i64[44,44](torch),
E           edge_features=f32[1418,24](torch),
E           node_features=f32[44,136](torch),
E           edge_indices=i64[2,1418](torch),
E           target=f32[1](torch),
E           total_nodes=44,
E           total_edges=1418
E         ),
E         SampleEntry(
E           adj_matrix=i64[28,28](torch),
E           edge_features=f32[584,24](torch),
E           node_features=f32[28,136](torch),
E           edge_indices=i64[2,584](torch),
E           target=f32[1](torch),
E           total_nodes=28,
E           total_edges=584
E         ),
E         SampleEntry(
E           adj_matrix=i64[34,34](torch),
E           edge_features=f32[826,24](torch),
E           node_features=f32[34,136](torch),
E           edge_indices=i64[2,826](torch),
E           target=f32[1](torch),
E           total_nodes=34,
E           total_edges=826
E         ),
E         SampleEntry(
E           adj_matrix=i64[47,47](torch),
E           edge_features=f32[1640,24](torch),
E           node_features=f32[47,136](torch),
E           edge_indices=i64[2,1640](torch),
E           target=f32[1](torch),
E           total_nodes=47,
E           total_edges=1640
E         ),
E         SampleEntry(
E           adj_matrix=i64[20,20](torch),
E           edge_features=f32[296,24](torch),
E           node_features=f32[20,136](torch),
E           edge_indices=i64[2,296](torch),
E           target=f32[1](torch),
E           total_nodes=20,
E           total_edges=296
E         ),
E         SampleEntry(
E           adj_matrix=i64[16,16](torch),
E           edge_features=f32[168,24](torch),
E           node_features=f32[16,136](torch),
E           edge_indices=i64[2,168](torch),
E           target=f32[1](torch),
E           total_nodes=16,
E           total_edges=168
E         ),
E         SampleEntry(
E           adj_matrix=i64[3,3](torch),
E           edge_features=f32[4,24](torch),
E           node_features=f32[3,136](torch),
E           edge_indices=i64[2,4](torch),
E           target=f32[1](torch),
E           total_nodes=3,
E           total_edges=4
E         ),
E         SampleEntry(
E           adj_matrix=i64[7,7](torch),
E           edge_features=f32[20,24](torch),
E           node_features=f32[7,136](torch),
E           edge_indices=i64[2,20](torch),
E           target=f32[1](torch),
E           total_nodes=7,
E           total_edges=20
E         ),
E         SampleEntry(
E           adj_matrix=i64[22,22](torch),
E           edge_features=f32[344,24](torch),
E           node_features=f32[22,136](torch),
E           edge_indices=i64[2,344](torch),
E           target=f32[1](torch),
E           total_nodes=22,
E           total_edges=344
E         ),
E         SampleEntry(
E           adj_matrix=i64[2,2](torch),
E           edge_features=f32[2,24](torch),
E           node_features=f32[2,136](torch),
E           edge_indices=i64[2,2](torch),
E           target=f32[1](torch),
E           total_nodes=2,
E           total_edges=2
E         ),
E         SampleEntry(
E           adj_matrix=i64[6,6](torch),
E           edge_features=f32[22,24](torch),
E           node_features=f32[6,136](torch),
E           edge_indices=i64[2,22](torch),
E           target=f32[1](torch),
E           total_nodes=6,
E           total_edges=22
E         ),
E         SampleEntry(
E           adj_matrix=i64[31,31](torch),
E           edge_features=f32[732,24](torch),
E           node_features=f32[31,136](torch),
E           edge_indices=i64[2,732](torch),
E           target=f32[1](torch),
E           total_nodes=31,
E           total_edges=732
E         ),
E         SampleEntry(
E           adj_matrix=i64[5,5](torch),
E           edge_features=f32[12,24](torch),
E           node_features=f32[5,136](torch),
E           edge_indices=i64[2,12](torch),
E           target=f32[1](torch),
E           total_nodes=5,
E           total_edges=12
E         ),
E         SampleEntry(
E           adj_matrix=i64[3,3](torch),
E           edge_features=f32[6,24](torch),
E           node_features=f32[3,136](torch),
E           edge_indices=i64[2,6](torch),
E           target=f32[1](torch),
E           total_nodes=3,
E           total_edges=6
E         ),
E         SampleEntry(
E           adj_matrix=i64[21,21](torch),
E           edge_features=f32[308,24](torch),
E           node_features=f32[21,136](torch),
E           edge_indices=i64[2,308](torch),
E           target=f32[1](torch),
E           total_nodes=21,
E           total_edges=308
E         ),
E         SampleEntry(
E           adj_matrix=i64[46,46](torch),
E           edge_features=f32[1540,24](torch),
E           node_features=f32[46,136](torch),
E           edge_indices=i64[2,1540](torch),
E           target=f32[1](torch),
E           total_nodes=46,
E           total_edges=1540
E         ),
E         SampleEntry(
E           adj_matrix=i64[48,48](torch),
E           edge_features=f32[1670,24](torch),
E           node_features=f32[48,136](torch),
E           edge_indices=i64[2,1670](torch),
E           target=f32[1](torch),
E           total_nodes=48,
E           total_edges=1670
E         ),
E         SampleEntry(
E           adj_matrix=i64[18,18](torch),
E           edge_features=f32[242,24](torch),
E           node_features=f32[18,136](torch),
E           edge_indices=i64[2,242](torch),
E           target=f32[1](torch),
E           total_nodes=18,
E           total_edges=242
E         ),
E         SampleEntry(
E           adj_matrix=i64[37,37](torch),
E           edge_features=f32[1066,24](torch),
E           node_features=f32[37,136](torch),
E           edge_indices=i64[2,1066](torch),
E           target=f32[1](torch),
E           total_nodes=37,
E           total_edges=1066
E         ),
E         SampleEntry(
E           adj_matrix=i64[33,33](torch),
E           edge_features=f32[768,24](torch),
E           node_features=f32[33,136](torch),
E           edge_indices=i64[2,768](torch),
E           target=f32[1](torch),
E           total_nodes=33,
E           total_edges=768
E         ),
E         SampleEntry(
E           adj_matrix=i64[23,23](torch),
E           edge_features=f32[364,24](torch),
E           node_features=f32[23,136](torch),
E           edge_indices=i64[2,364](torch),
E           target=f32[1](torch),
E           total_nodes=23,
E           total_edges=364
E         )
E       ]
E       Expected type: list[graphmodels.datasets.mpnn_dataset.MPNNEntry].
E       ----------------------
E       Called with parameters: {
E         'batch':
E         [
E           SampleEntry(
E             adj_matrix=i64[39,39](torch),
E             edge_features=f32[1082,24](torch),
E             node_features=f32[39,136](torch),
E             edge_indices=i64[2,1082](torch),
E             target=f32[1](torch),
E             total_nodes=39,
E             total_edges=1082
E           ),
E           SampleEntry(
E             adj_matrix=i64[17,17](torch),
E             edge_features=f32[214,24](torch),
E             node_features=f32[17,136](torch),
E             edge_indices=i64[2,214](torch),
E             target=f32[1](torch),
E             total_nodes=17,
E             total_edges=214
E           ),
E           SampleEntry(
E             adj_matrix=i64[27,27](torch),
E             edge_features=f32[506,24](torch),
E             node_features=f32[27,136](torch),
E             edge_indices=i64[2,506](torch),
E             target=f32[1](torch),
E             total_nodes=27,
E             total_edges=506
E           ),
E           SampleEntry(
E             adj_matrix=i64[8,8](torch),
E             edge_features=f32[36,24](torch),
E             node_features=f32[8,136](torch),
E             edge_indices=i64[2,36](torch),
E             target=f32[1](torch),
E             total_nodes=8,
E             total_edges=36
E           ),
E           SampleEntry(
E             adj_matrix=i64[45,45](torch),
E             edge_features=f32[1514,24](torch),
E             node_features=f32[45,136](torch),
E             edge_indices=i64[2,1514](torch),
E             target=f32[1](torch),
E             total_nodes=45,
E             total_edges=1514
E           ),
E           SampleEntry(
E             adj_matrix=i64[44,44](torch),
E             edge_features=f32[1426,24](torch),
E             node_features=f32[44,136](torch),
E             edge_indices=i64[2,1426](torch),
E             target=f32[1](torch),
E             total_nodes=44,
E             total_edges=1426
E           ),
E           SampleEntry(
E             adj_matrix=i64[7,7](torch),
E             edge_features=f32[28,24](torch),
E             node_features=f32[7,136](torch),
E             edge_indices=i64[2,28](torch),
E             target=f32[1](torch),
E             total_nodes=7,
E             total_edges=28
E           ),
E           SampleEntry(
E             adj_matrix=i64[11,11](torch),
E             edge_features=f32[86,24](torch),
E             node_features=f32[11,136](torch),
E             edge_indices=i64[2,86](torch),
E             target=f32[1](torch),
E             total_nodes=11,
E             total_edges=86
E           ),
E           SampleEntry(
E             adj_matrix=i64[49,49](torch),
E             edge_features=f32[1752,24](torch),
E             node_features=f32[49,136](torch),
E             edge_indices=i64[2,1752](torch),
E             target=f32[1](torch),
E             total_nodes=49,
E             total_edges=1752
E           ),
E           SampleEntry(
E             adj_matrix=i64[50,50](torch),
E             edge_features=f32[1866,24](torch),
E             node_features=f32[50,136](torch),
E             edge_indices=i64[2,1866](torch),
E             target=f32[1](torch),
E             total_nodes=50,
E             total_edges=1866
E           ),
E           SampleEntry(
E             adj_matrix=i64[34,34](torch),
E             edge_features=f32[856,24](torch),
E             node_features=f32[34,136](torch),
E             edge_indices=i64[2,856](torch),
E             target=f32[1](torch),
E             total_nodes=34,
E             total_edges=856
E           ),
E           SampleEntry(
E             adj_matrix=i64[34,34](torch),
E             edge_features=f32[850,24](torch),
E             node_features=f32[34,136](torch),
E             edge_indices=i64[2,850](torch),
E             target=f32[1](torch),
E             total_nodes=34,
E             total_edges=850
E           ),
E           SampleEntry(
E             adj_matrix=i64[37,37](torch),
E             edge_features=f32[1038,24](torch),
E             node_features=f32[37,136](torch),
E             edge_indices=i64[2,1038](torch),
E             target=f32[1](torch),
E             total_nodes=37,
E             total_edges=1038
E           ),
E           SampleEntry(
E             adj_matrix=i64[27,27](torch),
E             edge_features=f32[520,24](torch),
E             node_features=f32[27,136](torch),
E             edge_indices=i64[2,520](torch),
E             target=f32[1](torch),
E             total_nodes=27,
E             total_edges=520
E           ),
E           SampleEntry(
E             adj_matrix=i64[18,18](torch),
E             edge_features=f32[234,24](torch),
E             node_features=f32[18,136](torch),
E             edge_indices=i64[2,234](torch),
E             target=f32[1](torch),
E             total_nodes=18,
E             total_edges=234
E           ),
E           SampleEntry(
E             adj_matrix=i64[22,22](torch),
E             edge_features=f32[340,24](torch),
E             node_features=f32[22,136](torch),
E             edge_indices=i64[2,340](torch),
E             target=f32[1](torch),
E             total_nodes=22,
E             total_edges=340
E           ),
E           SampleEntry(
E             adj_matrix=i64[20,20](torch),
E             edge_features=f32[290,24](torch),
E             node_features=f32[20,136](torch),
E             edge_indices=i64[2,290](torch),
E             target=f32[1](torch),
E             total_nodes=20,
E             total_edges=290
E           ),
E           SampleEntry(
E             adj_matrix=i64[41,41](torch),
E             edge_features=f32[1188,24](torch),
E             node_features=f32[41,136](torch),
E             edge_indices=i64[2,1188](torch),
E             target=f32[1](torch),
E             total_nodes=41,
E             total_edges=1188
E           ),
E           SampleEntry(
E             adj_matrix=i64[40,40](torch),
E             edge_features=f32[1148,24](torch),
E             node_features=f32[40,136](torch),
E             edge_indices=i64[2,1148](torch),
E             target=f32[1](torch),
E             total_nodes=40,
E             total_edges=1148
E           ),
E           SampleEntry(
E             adj_matrix=i64[14,14](torch),
E             edge_features=f32[130,24](torch),
E             node_features=f32[14,136](torch),
E             edge_indices=i64[2,130](torch),
E             target=f32[1](torch),
E             total_nodes=14,
E             total_edges=130
E           ),
E           SampleEntry(
E             adj_matrix=i64[28,28](torch),
E             edge_features=f32[566,24](torch),
E             node_features=f32[28,136](torch),
E             edge_indices=i64[2,566](torch),
E             target=f32[1](torch),
E             total_nodes=28,
E             total_edges=566
E           ),
E           SampleEntry(
E             adj_matrix=i64[20,20](torch),
E             edge_features=f32[284,24](torch),
E             node_features=f32[20,136](torch),
E             edge_indices=i64[2,284](torch),
E             target=f32[1](torch),
E             total_nodes=20,
E             total_edges=284
E           ),
E           SampleEntry(
E             adj_matrix=i64[14,14](torch),
E             edge_features=f32[136,24](torch),
E             node_features=f32[14,136](torch),
E             edge_indices=i64[2,136](torch),
E             target=f32[1](torch),
E             total_nodes=14,
E             total_edges=136
E           ),
E           SampleEntry(
E             adj_matrix=i64[46,46](torch),
E             edge_features=f32[1604,24](torch),
E             node_features=f32[46,136](torch),
E             edge_indices=i64[2,1604](torch),
E             target=f32[1](torch),
E             total_nodes=46,
E             total_edges=1604
E           ),
E           SampleEntry(
E             adj_matrix=i64[8,8](torch),
E             edge_features=f32[44,24](torch),
E             node_features=f32[8,136](torch),
E             edge_indices=i64[2,44](torch),
E             target=f32[1](torch),
E             total_nodes=8,
E             total_edges=44
E           ),
E           SampleEntry(
E             adj_matrix=i64[14,14](torch),
E             edge_features=f32[120,24](torch),
E             node_features=f32[14,136](torch),
E             edge_indices=i64[2,120](torch),
E             target=f32[1](torch),
E             total_nodes=14,
E             total_edges=120
E           ),
E           SampleEntry(
E             adj_matrix=i64[48,48](torch),
E             edge_features=f32[1736,24](torch),
E             node_features=f32[48,136](torch),
E             edge_indices=i64[2,1736](torch),
E             target=f32[1](torch),
E             total_nodes=48,
E             total_edges=1736
E           ),
E           SampleEntry(
E             adj_matrix=i64[5,5](torch),
E             edge_features=f32[18,24](torch),
E             node_features=f32[5,136](torch),
E             edge_indices=i64[2,18](torch),
E             target=f32[1](torch),
E             total_nodes=5,
E             total_edges=18
E           ),
E           SampleEntry(
E             adj_matrix=i64[4,4](torch),
E             edge_features=f32[6,24](torch),
E             node_features=f32[4,136](torch),
E             edge_indices=i64[2,6](torch),
E             target=f32[1](torch),
E             total_nodes=4,
E             total_edges=6
E           ),
E           SampleEntry(
E             adj_matrix=i64[12,12](torch),
E             edge_features=f32[98,24](torch),
E             node_features=f32[12,136](torch),
E             edge_indices=i64[2,98](torch),
E             target=f32[1](torch),
E             total_nodes=12,
E             total_edges=98
E           ),
E           SampleEntry(
E             adj_matrix=i64[48,48](torch),
E             edge_features=f32[1698,24](torch),
E             node_features=f32[48,136](torch),
E             edge_indices=i64[2,1698](torch),
E             target=f32[1](torch),
E             total_nodes=48,
E             total_edges=1698
E           ),
E           SampleEntry(
E             adj_matrix=i64[15,15](torch),
E             edge_features=f32[152,24](torch),
E             node_features=f32[15,136](torch),
E             edge_indices=i64[2,152](torch),
E             target=f32[1](torch),
E             total_nodes=15,
E             total_edges=152
E           ),
E           SampleEntry(
E             adj_matrix=i64[20,20](torch),
E             edge_features=f32[304,24](torch),
E             node_features=f32[20,136](torch),
E             edge_indices=i64[2,304](torch),
E             target=f32[1](torch),
E             total_nodes=20,
E             total_edges=304
E           ),
E           SampleEntry(
E             adj_matrix=i64[48,48](torch),
E             edge_features=f32[1656,24](torch),
E             node_features=f32[48,136](torch),
E             edge_indices=i64[2,1656](torch),
E             target=f32[1](torch),
E             total_nodes=48,
E             total_edges=1656
E           ),
E           SampleEntry(
E             adj_matrix=i64[25,25](torch),
E             edge_features=f32[440,24](torch),
E             node_features=f32[25,136](torch),
E             edge_indices=i64[2,440](torch),
E             target=f32[1](torch),
E             total_nodes=25,
E             total_edges=440
E           ),
E           SampleEntry(
E             adj_matrix=i64[17,17](torch),
E             edge_features=f32[204,24](torch),
E             node_features=f32[17,136](torch),
E             edge_indices=i64[2,204](torch),
E             target=f32[1](torch),
E             total_nodes=17,
E             total_edges=204
E           ),
E           SampleEntry(
E             adj_matrix=i64[17,17](torch),
E             edge_features=f32[206,24](torch),
E             node_features=f32[17,136](torch),
E             edge_indices=i64[2,206](torch),
E             target=f32[1](torch),
E             total_nodes=17,
E             total_edges=206
E           ),
E           SampleEntry(
E             adj_matrix=i64[14,14](torch),
E             edge_features=f32[130,24](torch),
E             node_features=f32[14,136](torch),
E             edge_indices=i64[2,130](torch),
E             target=f32[1](torch),
E             total_nodes=14,
E             total_edges=130
E           ),
E           SampleEntry(
E             adj_matrix=i64[16,16](torch),
E             edge_features=f32[166,24](torch),
E             node_features=f32[16,136](torch),
E             edge_indices=i64[2,166](torch),
E             target=f32[1](torch),
E             total_nodes=16,
E             total_edges=166
E           ),
E           SampleEntry(
E             adj_matrix=i64[40,40](torch),
E             edge_features=f32[1170,24](torch),
E             node_features=f32[40,136](torch),
E             edge_indices=i64[2,1170](torch),
E             target=f32[1](torch),
E             total_nodes=40,
E             total_edges=1170
E           ),
E           SampleEntry(
E             adj_matrix=i64[31,31](torch),
E             edge_features=f32[686,24](torch),
E             node_features=f32[31,136](torch),
E             edge_indices=i64[2,686](torch),
E             target=f32[1](torch),
E             total_nodes=31,
E             total_edges=686
E           ),
E           SampleEntry(
E             adj_matrix=i64[36,36](torch),
E             edge_features=f32[938,24](torch),
E             node_features=f32[36,136](torch),
E             edge_indices=i64[2,938](torch),
E             target=f32[1](torch),
E             total_nodes=36,
E             total_edges=938
E           ),
E           SampleEntry(
E             adj_matrix=i64[48,48](torch),
E             edge_features=f32[1694,24](torch),
E             node_features=f32[48,136](torch),
E             edge_indices=i64[2,1694](torch),
E             target=f32[1](torch),
E             total_nodes=48,
E             total_edges=1694
E           ),
E           SampleEntry(
E             adj_matrix=i64[44,44](torch),
E             edge_features=f32[1418,24](torch),
E             node_features=f32[44,136](torch),
E             edge_indices=i64[2,1418](torch),
E             target=f32[1](torch),
E             total_nodes=44,
E             total_edges=1418
E           ),
E           SampleEntry(
E             adj_matrix=i64[28,28](torch),
E             edge_features=f32[584,24](torch),
E             node_features=f32[28,136](torch),
E             edge_indices=i64[2,584](torch),
E             target=f32[1](torch),
E             total_nodes=28,
E             total_edges=584
E           ),
E           SampleEntry(
E             adj_matrix=i64[34,34](torch),
E             edge_features=f32[826,24](torch),
E             node_features=f32[34,136](torch),
E             edge_indices=i64[2,826](torch),
E             target=f32[1](torch),
E             total_nodes=34,
E             total_edges=826
E           ),
E           SampleEntry(
E             adj_matrix=i64[47,47](torch),
E             edge_features=f32[1640,24](torch),
E             node_features=f32[47,136](torch),
E             edge_indices=i64[2,1640](torch),
E             target=f32[1](torch),
E             total_nodes=47,
E             total_edges=1640
E           ),
E           SampleEntry(
E             adj_matrix=i64[20,20](torch),
E             edge_features=f32[296,24](torch),
E             node_features=f32[20,136](torch),
E             edge_indices=i64[2,296](torch),
E             target=f32[1](torch),
E             total_nodes=20,
E             total_edges=296
E           ),
E           SampleEntry(
E             adj_matrix=i64[16,16](torch),
E             edge_features=f32[168,24](torch),
E             node_features=f32[16,136](torch),
E             edge_indices=i64[2,168](torch),
E             target=f32[1](torch),
E             total_nodes=16,
E             total_edges=168
E           ),
E           SampleEntry(
E             adj_matrix=i64[3,3](torch),
E             edge_features=f32[4,24](torch),
E             node_features=f32[3,136](torch),
E             edge_indices=i64[2,4](torch),
E             target=f32[1](torch),
E             total_nodes=3,
E             total_edges=4
E           ),
E           SampleEntry(
E             adj_matrix=i64[7,7](torch),
E             edge_features=f32[20,24](torch),
E             node_features=f32[7,136](torch),
E             edge_indices=i64[2,20](torch),
E             target=f32[1](torch),
E             total_nodes=7,
E             total_edges=20
E           ),
E           SampleEntry(
E             adj_matrix=i64[22,22](torch),
E             edge_features=f32[344,24](torch),
E             node_features=f32[22,136](torch),
E             edge_indices=i64[2,344](torch),
E             target=f32[1](torch),
E             total_nodes=22,
E             total_edges=344
E           ),
E           SampleEntry(
E             adj_matrix=i64[2,2](torch),
E             edge_features=f32[2,24](torch),
E             node_features=f32[2,136](torch),
E             edge_indices=i64[2,2](torch),
E             target=f32[1](torch),
E             total_nodes=2,
E             total_edges=2
E           ),
E           SampleEntry(
E             adj_matrix=i64[6,6](torch),
E             edge_features=f32[22,24](torch),
E             node_features=f32[6,136](torch),
E             edge_indices=i64[2,22](torch),
E             target=f32[1](torch),
E             total_nodes=6,
E             total_edges=22
E           ),
E           SampleEntry(
E             adj_matrix=i64[31,31](torch),
E             edge_features=f32[732,24](torch),
E             node_features=f32[31,136](torch),
E             edge_indices=i64[2,732](torch),
E             target=f32[1](torch),
E             total_nodes=31,
E             total_edges=732
E           ),
E           SampleEntry(
E             adj_matrix=i64[5,5](torch),
E             edge_features=f32[12,24](torch),
E             node_features=f32[5,136](torch),
E             edge_indices=i64[2,12](torch),
E             target=f32[1](torch),
E             total_nodes=5,
E             total_edges=12
E           ),
E           SampleEntry(
E             adj_matrix=i64[3,3](torch),
E             edge_features=f32[6,24](torch),
E             node_features=f32[3,136](torch),
E             edge_indices=i64[2,6](torch),
E             target=f32[1](torch),
E             total_nodes=3,
E             total_edges=6
E           ),
E           SampleEntry(
E             adj_matrix=i64[21,21](torch),
E             edge_features=f32[308,24](torch),
E             node_features=f32[21,136](torch),
E             edge_indices=i64[2,308](torch),
E             target=f32[1](torch),
E             total_nodes=21,
E             total_edges=308
E           ),
E           SampleEntry(
E             adj_matrix=i64[46,46](torch),
E             edge_features=f32[1540,24](torch),
E             node_features=f32[46,136](torch),
E             edge_indices=i64[2,1540](torch),
E             target=f32[1](torch),
E             total_nodes=46,
E             total_edges=1540
E           ),
E           SampleEntry(
E             adj_matrix=i64[48,48](torch),
E             edge_features=f32[1670,24](torch),
E             node_features=f32[48,136](torch),
E             edge_indices=i64[2,1670](torch),
E             target=f32[1](torch),
E             total_nodes=48,
E             total_edges=1670
E           ),
E           SampleEntry(
E             adj_matrix=i64[18,18](torch),
E             edge_features=f32[242,24](torch),
E             node_features=f32[18,136](torch),
E             edge_indices=i64[2,242](torch),
E             target=f32[1](torch),
E             total_nodes=18,
E             total_edges=242
E           ),
E           SampleEntry(
E             adj_matrix=i64[37,37](torch),
E             edge_features=f32[1066,24](torch),
E             node_features=f32[37,136](torch),
E             edge_indices=i64[2,1066](torch),
E             target=f32[1](torch),
E             total_nodes=37,
E             total_edges=1066
E           ),
E           SampleEntry(
E             adj_matrix=i64[33,33](torch),
E             edge_features=f32[768,24](torch),
E             node_features=f32[33,136](torch),
E             edge_indices=i64[2,768](torch),
E             target=f32[1](torch),
E             total_nodes=33,
E             total_edges=768
E           ),
E           SampleEntry(
E             adj_matrix=i64[23,23](torch),
E             edge_features=f32[364,24](torch),
E             node_features=f32[23,136](torch),
E             edge_indices=i64[2,364](torch),
E             target=f32[1](torch),
E             total_nodes=23,
E             total_edges=364
E           )
E         ]
E       }
E       Parameter annotations: (batch: list[graphmodels.datasets.mpnn_dataset.MPNNEntry]) -> Any.

tests/test_data_utils.py:30: TypeCheckError
=========================== short test summary info ============================
FAILED tests/test_data_utils.py::TestMPNNBatching::test_create_batch_edge_index
FAILED tests/test_data_utils.py::TestMPNNBatching::test_mpnn_collate_diag - j...
============================== 2 failed in 3.67s ===============================
